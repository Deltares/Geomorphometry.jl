import{_ as o,c as n,a5 as r,j as s,a,G as t,w as l,B as p,o as h}from"./chunks/framework.C95TofVf.js";const re=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reference.md","filePath":"reference.md","lastUpdated":null}'),d={name:"reference.md"},k={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},W={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},Z={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},Y={class:"jldocstring custom-block",open:""};function _(ee,e,se,ie,te,ae){const i=p("Badge");return h(),n("div",null,[e[164]||(e[164]=r('<h2 id="Index" tabindex="-1">Index <a class="header-anchor" href="#Index" aria-label="Permalink to &quot;Index {#Index}&quot;">​</a></h2><ul><li><a href="#Geomorphometry.D8"><code>Geomorphometry.D8</code></a></li><li><a href="#Geomorphometry.DInf"><code>Geomorphometry.DInf</code></a></li><li><a href="#Geomorphometry.FD8"><code>Geomorphometry.FD8</code></a></li><li><a href="#Geomorphometry.Horn"><code>Geomorphometry.Horn</code></a></li><li><a href="#Geomorphometry.MaximumDownwardGradient"><code>Geomorphometry.MaximumDownwardGradient</code></a></li><li><a href="#Geomorphometry.SpreadMethod"><code>Geomorphometry.SpreadMethod</code></a></li><li><a href="#Geomorphometry.ZevenbergenThorne"><code>Geomorphometry.ZevenbergenThorne</code></a></li><li><a href="#Geomorphometry.BPI"><code>Geomorphometry.BPI</code></a></li><li><a href="#Geomorphometry.RIE"><code>Geomorphometry.RIE</code></a></li><li><a href="#Geomorphometry.SPI-Tuple{AbstractMatrix}"><code>Geomorphometry.SPI</code></a></li><li><a href="#Geomorphometry.TPI"><code>Geomorphometry.TPI</code></a></li><li><a href="#Geomorphometry.TRI-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.TRI</code></a></li><li><a href="#Geomorphometry.TWI-Tuple{AbstractMatrix}"><code>Geomorphometry.TWI</code></a></li><li><a href="#Geomorphometry.aspect-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.aspect</code></a></li><li><a href="#Geomorphometry.cellsize-Tuple{Any}"><code>Geomorphometry.cellsize</code></a></li><li><a href="#Geomorphometry.entropy-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.entropy</code></a></li><li><a href="#Geomorphometry.entropy!-Union{Tuple{T}, Tuple{AbstractMatrix{&lt;:Real}, AbstractMatrix{T}}} where T&lt;:Real"><code>Geomorphometry.entropy!</code></a></li><li><a href="#Geomorphometry.filldepressions"><code>Geomorphometry.filldepressions</code></a></li><li><a href="#Geomorphometry.flowaccumulation"><code>Geomorphometry.flowaccumulation</code></a></li><li><a href="#Geomorphometry.hillshade-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.hillshade</code></a></li><li><a href="#Geomorphometry.multihillshade-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.multihillshade</code></a></li><li><a href="#Geomorphometry.opening!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Integer, AbstractMatrix{T}}} where T&lt;:Real"><code>Geomorphometry.opening!</code></a></li><li><a href="#Geomorphometry.opening_circ!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Integer, AbstractMatrix{T}}} where T&lt;:Real"><code>Geomorphometry.opening_circ!</code></a></li><li><a href="#Geomorphometry.pitremoval-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.pitremoval</code></a></li><li><a href="#Geomorphometry.plan_curvature-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.plan_curvature</code></a></li><li><a href="#Geomorphometry.pmf-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.pmf</code></a></li><li><a href="#Geomorphometry.profile_curvature-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.profile_curvature</code></a></li><li><a href="#Geomorphometry.prominence"><code>Geomorphometry.prominence</code></a></li><li><a href="#Geomorphometry.prominence-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.prominence</code></a></li><li><a href="#Geomorphometry.pssm-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.pssm</code></a></li><li><a href="#Geomorphometry.roughness"><code>Geomorphometry.roughness</code></a></li><li><a href="#Geomorphometry.round_odd-Tuple{Any}"><code>Geomorphometry.round_odd</code></a></li><li><a href="#Geomorphometry.rugosity-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.rugosity</code></a></li><li><a href="#Geomorphometry.skb-Tuple{AbstractArray}"><code>Geomorphometry.skb</code></a></li><li><a href="#Geomorphometry.skbr"><code>Geomorphometry.skbr</code></a></li><li><a href="#Geomorphometry.skbr-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.skbr</code></a></li><li><a href="#Geomorphometry.slope-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.slope</code></a></li><li><a href="#Geomorphometry.smf-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.smf</code></a></li><li><a href="#Geomorphometry.spread-Tuple{Vector{CartesianIndex{2}}, AbstractMatrix{&lt;:Real}, AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.spread</code></a></li><li><a href="#Geomorphometry.spread-Union{Tuple{T}, Tuple{Tomlin, Vector{CartesianIndex{2}}, AbstractMatrix{T}, AbstractMatrix{&lt;:Real}}} where T&lt;:Real"><code>Geomorphometry.spread</code></a></li><li><a href="#Geomorphometry.spread-Tuple{Eastman, Vector{CartesianIndex{2}}, AbstractMatrix{&lt;:Real}, AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.spread</code></a></li><li><a href="#Geomorphometry.spread-Tuple{AbstractMatrix{&lt;:Real}, AbstractMatrix{&lt;:Real}, Real}"><code>Geomorphometry.spread</code></a></li><li><a href="#Geomorphometry.tangential_curvature-Tuple{AbstractMatrix{&lt;:Real}}"><code>Geomorphometry.tangential_curvature</code></a></li></ul><h2 id="Reference-Exported-functions" tabindex="-1">Reference - Exported functions <a class="header-anchor" href="#Reference-Exported-functions" aria-label="Permalink to &quot;Reference - Exported functions {#Reference-Exported-functions}&quot;">​</a></h2>',3)),s("details",k,[s("summary",null,[e[0]||(e[0]=s("a",{id:"Geomorphometry.D8",href:"#Geomorphometry.D8"},[s("span",{class:"jlbinding"},"Geomorphometry.D8")],-1)),e[1]||(e[1]=a()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[3]||(e[3]=s("p",null,[a("D8 Flow Direction method by "),s("a",{href:"/Geomorphometry.jl/previews/PR57/bibliography#jensonExtractingTopographicStructure1988"},"Jenson (1988)"),a(".")],-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[2]||(e[2]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/hydrology.jl#LL33",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",m,[s("summary",null,[e[4]||(e[4]=s("a",{id:"Geomorphometry.DInf",href:"#Geomorphometry.DInf"},[s("span",{class:"jlbinding"},"Geomorphometry.DInf")],-1)),e[5]||(e[5]=a()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[7]||(e[7]=s("p",null,[a("DInf Flow Direction method by "),s("a",{href:"/Geomorphometry.jl/previews/PR57/bibliography#tarbotonNewMethodDetermination1997"},"Tarboton (1997)"),a(".")],-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[6]||(e[6]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/hydrology.jl#LL36",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",c,[s("summary",null,[e[8]||(e[8]=s("a",{id:"Geomorphometry.FD8",href:"#Geomorphometry.FD8"},[s("span",{class:"jlbinding"},"Geomorphometry.FD8")],-1)),e[9]||(e[9]=a()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[11]||(e[11]=s("p",null,[a("FD8 Flow Direction method by "),s("a",{href:"/Geomorphometry.jl/previews/PR57/bibliography#quinnPredictionHillslopeFlow1991"},"Quin (1991)"),a(".")],-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[10]||(e[10]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/hydrology.jl#LL39",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",u,[s("summary",null,[e[12]||(e[12]=s("a",{id:"Geomorphometry.Horn",href:"#Geomorphometry.Horn"},[s("span",{class:"jlbinding"},"Geomorphometry.Horn")],-1)),e[13]||(e[13]=a()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[15]||(e[15]=s("p",null,[a("Third order finite difference estimator using all 8 neighbors by "),s("a",{href:"/Geomorphometry.jl/previews/PR57/bibliography#hornHillShadingReflectance1981"},"Horn, (1981)"),a(".")],-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[14]||(e[14]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL13",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",y,[s("summary",null,[e[16]||(e[16]=s("a",{id:"Geomorphometry.ZevenbergenThorne",href:"#Geomorphometry.ZevenbergenThorne"},[s("span",{class:"jlbinding"},"Geomorphometry.ZevenbergenThorne")],-1)),e[17]||(e[17]=a()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[19]||(e[19]=s("p",null,[a("Second order finite difference estimator using all 4 neighbors by "),s("a",{href:"/Geomorphometry.jl/previews/PR57/bibliography#zevenbergen1987quantitative"},"Zevenbergen and Thorne, (1987)"),a(".")],-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[18]||(e[18]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL10",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",g,[s("summary",null,[e[20]||(e[20]=s("a",{id:"Geomorphometry.BPI",href:"#Geomorphometry.BPI"},[s("span",{class:"jlbinding"},"Geomorphometry.BPI")],-1)),e[21]||(e[21]=a()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[23]||(e[23]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>BPI stands for Bathymetric Position Index (Lundblad et al., 2006), which is defined as the difference between a central pixel and the mean of the cells in an annulus around it.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[22]||(e[22]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL26-L30",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",b,[s("summary",null,[e[24]||(e[24]=s("a",{id:"Geomorphometry.RIE",href:"#Geomorphometry.RIE"},[s("span",{class:"jlbinding"},"Geomorphometry.RIE")],-1)),e[25]||(e[25]=a()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[27]||(e[27]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RIE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>RIE stands for Roughness Index Elevation, which quantifies the standard deviation of residual topography (Cavalli et al., 2008)</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[26]||(e[26]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL33-L37",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",f,[s("summary",null,[e[28]||(e[28]=s("a",{id:"Geomorphometry.SPI-Tuple{AbstractMatrix}",href:"#Geomorphometry.SPI-Tuple{AbstractMatrix}"},[s("span",{class:"jlbinding"},"Geomorphometry.SPI")],-1)),e[29]||(e[29]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[31]||(e[31]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">D8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), cellsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem))</span></span></code></pre></div><p>Computes the Stream Power Index (SPI) of a digital elevation model (DEM) <code>dem</code> with an optional <code>method</code> for flow direction and a <code>cellsize</code>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[30]||(e[30]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/hydrology.jl#LL371-L375",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",E,[s("summary",null,[e[32]||(e[32]=s("a",{id:"Geomorphometry.TPI",href:"#Geomorphometry.TPI"},[s("span",{class:"jlbinding"},"Geomorphometry.TPI")],-1)),e[33]||(e[33]=a()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[35]||(e[35]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>TPI stands for Topographic Position Index, which is defined as the difference between a central pixel and the mean of its surrounding cells (see Wilson et al 2007, Marine Geodesy 30:3-35).</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[34]||(e[34]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL17-L21",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",j,[s("summary",null,[e[36]||(e[36]=s("a",{id:"Geomorphometry.TRI-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.TRI-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.TRI")],-1)),e[37]||(e[37]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[39]||(e[39]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>TRI stands for Terrain Ruggedness Index, which measures the difference between a central pixel and its surrounding cells. This algorithm uses the square root of the sum of the square of the absolute difference between a central pixel and its surrounding cells. This is recommended for terrestrial use cases.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[38]||(e[38]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL43-L49",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",F,[s("summary",null,[e[40]||(e[40]=s("a",{id:"Geomorphometry.TWI-Tuple{AbstractMatrix}",href:"#Geomorphometry.TWI-Tuple{AbstractMatrix}"},[s("span",{class:"jlbinding"},"Geomorphometry.TWI")],-1)),e[41]||(e[41]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[43]||(e[43]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TWI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">D8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), cellsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem))</span></span></code></pre></div><p>Computes the Topographic Wetness Index (TWI) of a digital elevation model (DEM) <code>dem</code> with an optional <code>method</code> for flow direction and a <code>cellsize</code>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[42]||(e[42]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/hydrology.jl#LL360-L364",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",x,[s("summary",null,[e[44]||(e[44]=s("a",{id:"Geomorphometry.aspect-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.aspect-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.aspect")],-1)),e[45]||(e[45]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[47]||(e[47]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Horn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Aspect is direction of <a href="/Geomorphometry.jl/previews/PR57/reference#Geomorphometry.slope-Tuple{AbstractMatrix{&lt;:Real}}"><code>slope</code></a>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[46]||(e[46]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL103-L107",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",C,[s("summary",null,[e[48]||(e[48]=s("a",{id:"Geomorphometry.entropy-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.entropy-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.entropy")],-1)),e[49]||(e[49]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[51]||(e[51]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">entropy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; step</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Entropy calculates the Shannon entropy of the surrounding cells of a central cell. <code>step</code> is the bin size for the histogram.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[50]||(e[50]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL93-L98",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",G,[s("summary",null,[e[52]||(e[52]=s("a",{id:"Geomorphometry.filldepressions",href:"#Geomorphometry.filldepressions"},[s("span",{class:"jlbinding"},"Geomorphometry.filldepressions")],-1)),e[53]||(e[53]=a()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[55]||(e[55]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filldepressions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{Bool}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Performs the Priority-Flood algorithm (<a href="/Geomorphometry.jl/previews/PR57/bibliography#barnesPriorityFloodOptimalDepressionFilling2014">Barnes <em>et al.</em>, 2014</a>) on the given digital elevation model (DEM) <code>dem</code> with an optional <code>mask</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>dem::AbstractMatrix</code>: A 2D array representing the digital elevation model (DEM).</p></li><li><p><code>mask::AbstractMatrix{Bool}</code>: A 2D boolean array representing the mask. Cells with <code>true</code> values are considered in the computation, while cells with <code>false</code> values are ignored.</p></li></ul>',4)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[54]||(e[54]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/hydrology.jl#LL16-L24",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",v,[s("summary",null,[e[56]||(e[56]=s("a",{id:"Geomorphometry.flowaccumulation",href:"#Geomorphometry.flowaccumulation"},[s("span",{class:"jlbinding"},"Geomorphometry.flowaccumulation")],-1)),e[57]||(e[57]=a()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[59]||(e[59]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flowaccumulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, closed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{Bool}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FlowDirectionMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the flow accumulation of a digital elevation model (DEM) <code>dem</code> with an optional <code>closed</code> mask and a <code>method</code> for flow direction. Returns the flow accumulation and the flow direction (local drainage direction or ldd)</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[58]||(e[58]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/hydrology.jl#LL185-L190",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",A,[s("summary",null,[e[60]||(e[60]=s("a",{id:"Geomorphometry.hillshade-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.hillshade-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.hillshade")],-1)),e[61]||(e[61]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[63]||(e[63]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hillshade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; azimuth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">315.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zenith</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cellsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem))</span></span></code></pre></div><p>hillshade is the simulated illumination of a surface based on its <a href="/Geomorphometry.jl/previews/PR57/reference#Geomorphometry.slope-Tuple{AbstractMatrix{&lt;:Real}}"><code>slope</code></a> and <a href="/Geomorphometry.jl/previews/PR57/reference#Geomorphometry.aspect-Tuple{AbstractMatrix{&lt;:Real}}"><code>aspect</code></a> given a light source with azimuth and zenith angles in °, as defined in <a href="/Geomorphometry.jl/previews/PR57/bibliography#burroughPrinciplesGeographicalInformation2015">Burrough, P. A., and McDonell, R. A., (1998)</a>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[62]||(e[62]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/plot.jl#LL24-L30",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",T,[s("summary",null,[e[64]||(e[64]=s("a",{id:"Geomorphometry.multihillshade-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.multihillshade-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.multihillshade")],-1)),e[65]||(e[65]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[67]||(e[67]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multihillshade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; cellsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem))</span></span></code></pre></div><p>multihillshade is the simulated illumination of a surface based on its <a href="/Geomorphometry.jl/previews/PR57/reference#Geomorphometry.slope-Tuple{AbstractMatrix{&lt;:Real}}"><code>slope</code></a> and <a href="/Geomorphometry.jl/previews/PR57/reference#Geomorphometry.aspect-Tuple{AbstractMatrix{&lt;:Real}}"><code>aspect</code></a>. Like <a href="/Geomorphometry.jl/previews/PR57/reference#Geomorphometry.hillshade-Tuple{AbstractMatrix{&lt;:Real}}"><code>hillshade</code></a>, but now using multiple sources as defined in <a href="/Geomorphometry.jl/previews/PR57/bibliography#mark1992multidirectional">Mark, R.K. (1992)</a>, similar to GDALs -multidirectional.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[66]||(e[66]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/plot.jl#LL69-L75",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",M,[s("summary",null,[e[68]||(e[68]=s("a",{id:"Geomorphometry.pitremoval-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.pitremoval-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.pitremoval")],-1)),e[69]||(e[69]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[71]||(e[71]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pitremoval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Remove pits from a DEM Array if the center cell of a 3x3 patch is <code>limit</code> lower or than the surrounding cells.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[70]||(e[70]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL207-L211",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",R,[s("summary",null,[e[72]||(e[72]=s("a",{id:"Geomorphometry.plan_curvature-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.plan_curvature-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.plan_curvature")],-1)),e[73]||(e[73]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[75]||(e[75]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plan_curvature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; cellsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem), radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate projected contour curvature (plan curvature) as defined by <a href="/Geomorphometry.jl/previews/PR57/bibliography#minarComprehensiveSystemDefinitions2020">Minár et al., (2020)</a>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[74]||(e[74]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL387-L391",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",D,[s("summary",null,[e[76]||(e[76]=s("a",{id:"Geomorphometry.pmf-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.pmf-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.pmf")],-1)),e[77]||(e[77]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[79]||(e[79]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B, flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pmf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A; ωₘ, slope, dhₘ, dh₀, cellsize, adjust, erode)</span></span></code></pre></div><p>Applies the progressive morphological filter by <a href="/Geomorphometry.jl/previews/PR57/bibliography#keqizhangProgressiveMorphologicalFilter2003">Zhang (2003)</a> to <code>A</code>.</p><p><strong>Output</strong></p><ul><li><p><code>B::Array{T,2}</code> Maximum allowable values</p></li><li><p><code>flags::Array{Float64,2}</code> A sized array with window sizes if filtered, zero if not filtered.</p></li></ul><p>Afterwards, one can retrieve the resulting mask for <code>A</code> by <code>A .&lt;= B</code> or <code>flags .== 0.</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>A::Array{T,2}</code> Input Array</p></li><li><p><code>ωₘ::Real=20.</code> Maximum window size [m]</p></li><li><p><code>slope::Real=0.01</code> Terrain slope [m/m]</p></li><li><p><code>dhₘ::Real=2.5</code> Maximum elevation threshold [m]</p></li><li><p><code>dh₀::Real=0.2</code> Initial elevation threshold [m]</p></li><li><p><code>cellsize::Real=1.</code> Cellsize in [m]</p></li></ul>',7)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[78]||(e[78]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/pmf.jl#LL1-L19",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",B,[s("summary",null,[e[80]||(e[80]=s("a",{id:"Geomorphometry.profile_curvature-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.profile_curvature-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.profile_curvature")],-1)),e[81]||(e[81]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[83]||(e[83]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">profile_curvature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; cellsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem), radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate normal slope line curvature (profile curvature) as defined by <a href="/Geomorphometry.jl/previews/PR57/bibliography#minarComprehensiveSystemDefinitions2020">Minár et al., (2020)</a>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[82]||(e[82]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL337-L341",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",w,[s("summary",null,[e[84]||(e[84]=s("a",{id:"Geomorphometry.pssm-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.pssm-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.pssm")],-1)),e[85]||(e[85]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[87]||(e[87]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pssm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem; exaggeration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, resolution</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perceptually Shaded Slope Map by <a href="/Geomorphometry.jl/previews/PR57/bibliography#pingelPerceptuallyShadedSlope2014a">Pingel, Clarke., (2014)</a>.</p><p><strong>Output</strong></p><ul><li><code>image::Gray{T,2}</code> Grayscale image</li></ul><p><strong>Arguments</strong></p><ul><li><p><code>A::Array{Real,2}</code> Input Array</p></li><li><p><code>exaggeration::Real=2.3</code> Factor to exaggerate elevation</p></li><li><p><code>cellsize::Real=1.0</code> Size of cell to account for horizontal resolution if different from vertical resolution</p></li></ul>',6)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[86]||(e[86]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/plot.jl#LL2-L14",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",L,[s("summary",null,[e[88]||(e[88]=s("a",{id:"Geomorphometry.roughness",href:"#Geomorphometry.roughness"},[s("span",{class:"jlbinding"},"Geomorphometry.roughness")],-1)),e[89]||(e[89]=a()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[91]||(e[91]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">roughness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Roughness is the largest inter-cell difference of a central pixel and its surrounding cell, as defined in Wilson et al (2007, Marine Geodesy 30:3-35).</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[90]||(e[90]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL1-L5",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",I,[s("summary",null,[e[92]||(e[92]=s("a",{id:"Geomorphometry.rugosity-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.rugosity-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.rugosity")],-1)),e[93]||(e[93]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[95]||(e[95]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rugosity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the rugosity of a DEM, which is the ratio between the surface area divided by the planimetric area.</p><p>Jenness 2019 <a href="https://onlinelibrary.wiley.com/doi/abs/10.2193/0091-7648%282004%29032%5B0829%3ACLSAFD%5D2.0.CO%3B2" target="_blank" rel="noreferrer">https://onlinelibrary.wiley.com/doi/abs/10.2193/0091-7648(2004)032[0829%3ACLSAFD]2.0.CO%3B2</a></p>',3)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[94]||(e[94]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL161-L168",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",P,[s("summary",null,[e[96]||(e[96]=s("a",{id:"Geomorphometry.skb-Tuple{AbstractArray}",href:"#Geomorphometry.skb-Tuple{AbstractArray}"},[s("span",{class:"jlbinding"},"Geomorphometry.skb")],-1)),e[97]||(e[97]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[99]||(e[99]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> skb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A; mean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A))</span></span></code></pre></div><p>Applies skewness balancing by <a href="/Geomorphometry.jl/previews/PR57/bibliography#bartelsDTMGenerationLIDAR2006">Bartels e.a (2006)</a> to <code>A</code>. Improved the performance by applying a binary search to find the threshold value.</p><p><strong>Output</strong></p><ul><li><code>mask::BitMatrix</code> Mask of allowed values</li></ul>',4)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[98]||(e[98]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/skew.jl#LL1-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",z,[s("summary",null,[e[100]||(e[100]=s("a",{id:"Geomorphometry.skbr-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.skbr-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.skbr")],-1)),e[101]||(e[101]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[103]||(e[103]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> skbr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A; iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Applies recursive skewness balancing by <a href="/Geomorphometry.jl/previews/PR57/bibliography#bartelsThresholdfreeObjectGround2010">Bartels e.a (2010)</a> to <code>A</code>. Applies <code>skb</code> <code>iterations</code> times to the object (non-terrain) mask, as to include more (sloped) terrain.</p><p><strong>Output</strong></p><ul><li><code>mask::BitMatrix</code> Mask of allowed values</li></ul>',4)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[102]||(e[102]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/skew.jl#LL84-L93",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",O,[s("summary",null,[e[104]||(e[104]=s("a",{id:"Geomorphometry.slope-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.slope-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.slope")],-1)),e[105]||(e[105]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[107]||(e[107]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; cellsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem), method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Horn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), exaggeration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Slope is the rate of change between a cell and its neighbors.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[106]||(e[106]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL24-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",S,[s("summary",null,[e[108]||(e[108]=s("a",{id:"Geomorphometry.smf-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.smf-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.smf")],-1)),e[109]||(e[109]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[111]||(e[111]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> smf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A; ω, slope, dhₘ, dh₀, cellsize)</span></span></code></pre></div><p>Applies the simple morphological filter by <a href="/Geomorphometry.jl/previews/PR57/bibliography#pingelImprovedSimpleMorphological2013a">Pingel et al. (2013)</a> to <code>A</code>.</p><p><strong>Output</strong></p><ul><li><code>B::Array{Float64,2}</code> A filtered version of A</li></ul><p><strong>Arguments</strong></p><ul><li><p><code>A::Array{T,2}</code> Input Array</p></li><li><p><code>ω::Float64=18.</code> Maximum window size [m]</p></li><li><p><code>slope::Float64=0.01</code> Terrain slope [m/m]</p></li><li><p><code>cellsize::Float64=1.</code> Cellsize in [m]</p></li></ul>',6)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[110]||(e[110]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/smf.jl#LL1-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",U,[s("summary",null,[e[112]||(e[112]=s("a",{id:"Geomorphometry.spread-Tuple{AbstractMatrix{<:Real}, AbstractMatrix{<:Real}, Real}",href:"#Geomorphometry.spread-Tuple{AbstractMatrix{<:Real}, AbstractMatrix{<:Real}, Real}"},[s("span",{class:"jlbinding"},"Geomorphometry.spread")],-1)),e[113]||(e[113]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[115]||(e[115]=r(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, friction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Euclidean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, friction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Euclidean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Optimized (and more accurate) function based on the same friction everywhere.</p><p>When the friction is the same everywhere, there&#39;s no need for searching the shortest cost path, as one can just take a direct line to the input points.</p><p>The calculated cost is more accurate, as there&#39;s no &#39;zigzag&#39; from cell center to cell center.</p>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[114]||(e[114]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/spread.jl#LL167-L177",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",V,[s("summary",null,[e[116]||(e[116]=s("a",{id:"Geomorphometry.spread-Tuple{Eastman, Vector{CartesianIndex{2}}, AbstractMatrix{<:Real}, AbstractMatrix{<:Real}}",href:"#Geomorphometry.spread-Tuple{Eastman, Vector{CartesianIndex{2}}, AbstractMatrix{<:Real}, AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.spread")],-1)),e[117]||(e[117]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[119]||(e[119]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Eastman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, friction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Pushbroom method for friction costs as discussed by <a href="/Geomorphometry.jl/previews/PR57/bibliography#eastman1989pushbroom">Eastman (1989)</a>. This method should scale better (linearly) than the <a href="/Geomorphometry.jl/previews/PR57/bibliography#tomlin1983digital">Tomlin (1983)</a> method, but can require more <code>iterations</code> than set by default (3) in the case of maze-like, uncrossable obstacles.</p><p><strong>Output</strong></p><ul><li><code>Array{Float64,2}</code> Total friction distance</li></ul><p><strong>Arguments</strong></p><ul><li><p><code>points::Matrix{&lt;:Real}</code> Input Array</p></li><li><p><code>initial::Matrix{&lt;:Real}</code> Factor to exaggerate elevation</p></li><li><p><code>friction::Matrix{&lt;:Real}</code> Resolution of cell size</p></li><li><p><code>res=1</code> Resolution or cell size</p></li><li><p><code>limit=Inf</code> Initial fill value</p></li></ul>',6)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[118]||(e[118]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/spread.jl#LL85-L101",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",q,[s("summary",null,[e[120]||(e[120]=s("a",{id:"Geomorphometry.spread-Tuple{Vector{CartesianIndex{2}}, AbstractMatrix{<:Real}, AbstractMatrix{<:Real}}",href:"#Geomorphometry.spread-Tuple{Vector{CartesianIndex{2}}, AbstractMatrix{<:Real}, AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.spread")],-1)),e[121]||(e[121]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[123]||(e[123]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, friction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; cellsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tomlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Total friction distance spread from <code>points</code> from <code>initial</code> with <code>friction</code>. By default uses Tomlin, see SpreadMethod for other algorithms.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[122]||(e[122]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/spread.jl#LL209-L214",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",W,[s("summary",null,[e[124]||(e[124]=s("a",{id:"Geomorphometry.spread-Union{Tuple{T}, Tuple{Tomlin, Vector{CartesianIndex{2}}, AbstractMatrix{T}, AbstractMatrix{<:Real}}} where T<:Real",href:"#Geomorphometry.spread-Union{Tuple{T}, Tuple{Tomlin, Vector{CartesianIndex{2}}, AbstractMatrix{T}, AbstractMatrix{<:Real}}} where T<:Real"},[s("span",{class:"jlbinding"},"Geomorphometry.spread")],-1)),e[125]||(e[125]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[127]||(e[127]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tomlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, initial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, friction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tomlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Total friction distance spread from <code>points</code> as by <a href="/Geomorphometry.jl/previews/PR57/bibliography#tomlin1983digital">Tomlin (1983)</a>. This is also the method implemented by <a href="https://pcraster.geo.uu.nl/pcraster/4.0.2/doc/manual/op_spread.html" target="_blank" rel="noreferrer">PCRaster</a>.</p><p><strong>Output</strong></p><ul><li><code>Array{Float64,2}</code> Total friction distance</li></ul><p><strong>Arguments</strong></p><ul><li><p><code>points::Matrix{&lt;:Real}</code> Input Array</p></li><li><p><code>initial::Matrix{&lt;:Real}</code> Initial values of the result</p></li><li><p><code>friction::Matrix{&lt;:Real}</code> Resolution of cell size</p></li><li><p><code>res=1</code> Resolution or cell size</p></li><li><p><code>limit=Inf</code> Initial fill value</p></li></ul>',6)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[126]||(e[126]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/spread.jl#LL11-L26",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",H,[s("summary",null,[e[128]||(e[128]=s("a",{id:"Geomorphometry.tangential_curvature-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.tangential_curvature-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.tangential_curvature")],-1)),e[129]||(e[129]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[131]||(e[131]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tangential_curvature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; cellsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem), radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate normal contour curvature (tangential curvature) as defined by <a href="/Geomorphometry.jl/previews/PR57/bibliography#minarComprehensiveSystemDefinitions2020">Minár et al., (2020)</a>.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[130]||(e[130]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL360-L364",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e[165]||(e[165]=s("h2",{id:"Reference-Internal-functions",tabindex:"-1"},[a("Reference - Internal functions "),s("a",{class:"header-anchor",href:"#Reference-Internal-functions","aria-label":'Permalink to "Reference - Internal functions {#Reference-Internal-functions}"'},"​")],-1)),s("details",Z,[s("summary",null,[e[132]||(e[132]=s("a",{id:"Geomorphometry.MaximumDownwardGradient",href:"#Geomorphometry.MaximumDownwardGradient"},[s("span",{class:"jlbinding"},"Geomorphometry.MaximumDownwardGradient")],-1)),e[133]||(e[133]=a()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[135]||(e[135]=s("p",null,"Maximum Downward Gradient",-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[134]||(e[134]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/terrain.jl#LL16",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",N,[s("summary",null,[e[136]||(e[136]=s("a",{id:"Geomorphometry.SpreadMethod",href:"#Geomorphometry.SpreadMethod"},[s("span",{class:"jlbinding"},"Geomorphometry.SpreadMethod")],-1)),e[137]||(e[137]=a()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[139]||(e[139]=s("p",null,"Spread algorithms.",-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[138]||(e[138]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/spread.jl#LL6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",$,[s("summary",null,[e[140]||(e[140]=s("a",{id:"Geomorphometry.cellsize-Tuple{Any}",href:"#Geomorphometry.cellsize-Tuple{Any}"},[s("span",{class:"jlbinding"},"Geomorphometry.cellsize")],-1)),e[141]||(e[141]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[143]||(e[143]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cellsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem)</span></span></code></pre></div><p>Return an Tuple with the x and y length of each cell of the dem. Set them negatively to flip the image.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[142]||(e[142]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/utils.jl#LL200-L205",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",J,[s("summary",null,[e[144]||(e[144]=s("a",{id:"Geomorphometry.entropy!-Union{Tuple{T}, Tuple{AbstractMatrix{<:Real}, AbstractMatrix{T}}} where T<:Real",href:"#Geomorphometry.entropy!-Union{Tuple{T}, Tuple{AbstractMatrix{<:Real}, AbstractMatrix{T}}} where T<:Real"},[s("span",{class:"jlbinding"},"Geomorphometry.entropy!")],-1)),e[145]||(e[145]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[147]||(e[147]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">entropy!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Entropy calculates the Shannon entropy of the surrounding cells of a central cell.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[146]||(e[146]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL107-L111",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",K,[s("summary",null,[e[148]||(e[148]=s("a",{id:"Geomorphometry.opening!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Integer, AbstractMatrix{T}}} where T<:Real",href:"#Geomorphometry.opening!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Integer, AbstractMatrix{T}}} where T<:Real"},[s("span",{class:"jlbinding"},"Geomorphometry.opening!")],-1)),e[149]||(e[149]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[151]||(e[151]=s("p",null,[a("Apply the opening operation to "),s("code",null,"A"),a(" with window size "),s("code",null,"ω"),a(".")],-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[150]||(e[150]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/utils.jl#LL8",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",Q,[s("summary",null,[e[152]||(e[152]=s("a",{id:"Geomorphometry.opening_circ!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Integer, AbstractMatrix{T}}} where T<:Real",href:"#Geomorphometry.opening_circ!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Integer, AbstractMatrix{T}}} where T<:Real"},[s("span",{class:"jlbinding"},"Geomorphometry.opening_circ!")],-1)),e[153]||(e[153]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[155]||(e[155]=s("p",null,[a("Apply the opening operation to "),s("code",null,"A"),a(" with window size "),s("code",null,"ω"),a(".")],-1)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[154]||(e[154]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/utils.jl#LL19",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",X,[s("summary",null,[e[156]||(e[156]=s("a",{id:"Geomorphometry.prominence-Tuple{AbstractMatrix{<:Real}}",href:"#Geomorphometry.prominence-Tuple{AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"Geomorphometry.prominence")],-1)),e[157]||(e[157]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[159]||(e[159]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prominence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Prominence calculates the number of cells that are lower or equal than the central cell. Thus, 8 is a local maximum (peak), while 0 is a local minimum (pit).</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[158]||(e[158]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/relative.jl#LL75-L80",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",Y,[s("summary",null,[e[160]||(e[160]=s("a",{id:"Geomorphometry.round_odd-Tuple{Any}",href:"#Geomorphometry.round_odd-Tuple{Any}"},[s("span",{class:"jlbinding"},"Geomorphometry.round_odd")],-1)),e[161]||(e[161]=a()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[163]||(e[163]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">round_odd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Rounds <code>x</code> to the nearest odd number.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[162]||(e[162]=[s("a",{href:"https://github.com/Deltares/Geomorphometry.jl/blob/4086c1b1207e89d995b0c1ddb55785d0ec38ada6/src/pmf.jl#LL174-L178",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const oe=o(d,[["render",_]]);export{re as __pageData,oe as default};
